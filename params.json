{
  "name": "McCortex",
  "tagline": "Cortex on steroids: for larger populations with better assembly",
  "body": "McCortex: Population De Novo Assembly and Variant Calling\r\n===============================================\r\n\r\nMulti-sample de novo assembly and variant calling using de bruijn graphs.\r\nVariant calling with and without a reference genome. Between closely related\r\nsamples or highly diverged ones. From bacterial to mammalian genomes. Minimal\r\nconfiguration. And it's free.\r\n\r\nIsaac Turner's experimental rewrite of cortex_var, to handle larger populations\r\nwith better genome assembly. PhD supervisor: Prof Gil McVean. Collaborators: Zam Iqbal, Kiran Garimella. Based at the Wellcome Trust Centre for Human Genetics, University of Oxford.\r\n\r\n*Note: Currently under development.* Expect bugs, fixes and vague documentation until we hit our first release. Feel free to try out McCortex and watch this space for the release.\r\n\r\n9 Nov 2015\r\n\r\nBranch         | Status\r\n---------------|--------\r\nmaster:        | [![Build Status](https://travis-ci.org/mcveanlab/mccortex.svg?branch=master)](https://travis-ci.org/mcveanlab/mccortex)\r\ndevelop:       | [![Build Status](https://travis-ci.org/mcveanlab/mccortex.svg?branch=develop)](https://travis-ci.org/mcveanlab/mccortex)\r\ncode analysis: | [![Coverity Scan Build Status](https://scan.coverity.com/projects/2329/badge.svg)](https://scan.coverity.com/projects/2329)\r\n\r\nBuild\r\n-----\r\n\r\nMcCortex compiles with clang and gcc. Tested on Mac OS X and linux. Requires zlib.\r\nDownload with:\r\n\r\n    git clone --recursive https://github.com/mcveanlab/mccortex\r\n\r\nTo compile for a maximum kmer size of 31:\r\n\r\n    make all\r\n\r\nto compile for a maximum kmer size of 63:\r\n\r\n    make MAXK=63 all\r\n\r\nExecutables appear in the `bin/` directory.\r\n\r\n\r\nQuickstart: Variant calling\r\n---------------------------\r\n\r\nDownload and compile McCortex. Can be in any directory, later I'll assume it's in `~/mccortex/`:\r\n\r\n    git clone --recursive https://github.com/mcveanlab/mccortex\r\n    cd mccortex\r\n    make all MAXK=31\r\n    make all MAXK=63\r\n\r\nNow write a file detailing your samples and their data. Columns are separated by one or more spaces/tabs. File entries are separated by commas. Paired-end read files are separated by a colon ':'. File paths can be relative to the current directory or absolute. Most fileformats are supported:\r\n\r\n    cd /path/to/your/data\r\n    echo \"#sample_name  SE_files   PE_files                     interleaved_files\" >  samples.txt\r\n    echo \"Mickey        a.fa,b.fa  reads.1.fq.gz:reads.2.fq.gz  .\"                 >> samples.txt\r\n    echo \"Minney        .          reads.1.fq.gz:reads.2.fq.gz  in.bam\"            >> samples.txt\r\n    echo \"Pluto         seq.fq     .                            pluto.cram\"        >> samples.txt\r\n\r\nCreate a job file from your sample file (`samples.txt`). All output will go into the directory we specify (`mc_calls`). We also specify the kmer(s) to use. We'll run at `k=31` and `k=61` and merge the results.\r\n\r\nIf your data are haploid, we set `--ploidy 1`:\r\n\r\n    ~/mccortex/scripts/make-pipeline.pl -r /path/to/ref.fa --ploidy 1 31,61 mc_calls samples.txt > job.k31.k61.mk\r\n\r\nIf your samples are human, you have a mix of haploid and diploid chromosomes. Therefore you need to specify which samples have only one copy of `chrX` and one of `chrY`. The format is `-P <sample>:<chr>:<ploidy>` where `<sample>` and `<chr>` can be comma-separated lists. Ploidy arguments are read in order.\r\n\r\n    ~/mccortex/scripts/make-pipeline.pl -r /path/to/ref.fa --ploidy \"-P .:.:2 -P .:chrY:1 -P Mickey:chrX:1\" 31,61 mc_calls samples.txt > job.k31.k61.mk\r\n\r\nNow you're ready to run. You'll need to pass:\r\n- path to McCortex `CTXDIR=`\r\n- how much memory to use `MEM=`  (2GB for ten E. coli, 100GB for a human)\r\n- number of threads to use `NTHREADS=`\r\n\r\nRun the job file:\r\n\r\n    make -f job.k31.k61.mk CTXDIR=~/mccortex MEM=100GB NTHREADS=8 \\\r\n                           JOINT_CALLING=yes USE_LINKS=no brk-geno-vcf\r\n\r\nFor a human, running time will be about 8 hours for a single sample and use about 100GB of RAM. \r\n\r\nJob finished? Your results are in: `mc_calls/vcfs/breakpoints.joint.plain.k31.k61.geno.vcf.gz`.\r\n\r\nSomething go wrong? Take a look at the log file of the last command that ran. You may need to increase memory or compile for a different `MAXK=` value. Once you've fixed the issue, just rerun the `make -f job...` command. Add `--dry-run` to the `make` command to see which commands are going to be run without running them. \r\n\r\n\r\nCommands\r\n--------\r\n\r\n    usage: mccortex31 <command> [options] <args>\r\n    version: ctx=XXXX zlib=1.2.5 htslib=1.2.1 ASSERTS=ON hash=Lookup3 CHECKS=ON k=3..31\r\n    \r\n    Commands:   breakpoints  use a trusted assembled genome to call large events\r\n                bubbles      find bubbles in graph which are potential variants\r\n                build        construct cortex graph from FASTA/FASTQ/BAM\r\n                calls2vcf    convert bubble/breakpoint calls to VCF\r\n                check        load and check graph (.ctx) and path (.ctp) files\r\n                clean        clean errors from a graph\r\n                contigs      assemble contigs for a sample\r\n                correct      error correct reads\r\n                coverage     print contig coverage\r\n                dist         make colour kmer distance matrix\r\n                index        index a sorted cortex graph file\r\n                inferedges   infer graph edges between kmers before calling `thread`\r\n                join         combine graphs, filter graph intersections\r\n                links        clean and plot link files (.ctp)\r\n                pjoin        merge path files (.ctp)\r\n                popbubbles   pop bubbles in the population graph\r\n                pview        text view of a cortex path file (.ctp)\r\n                reads        filter reads against a graph\r\n                rmsubstr     reduce set of strings to remove substrings\r\n                server       interactively query the graph\r\n                sort         sort the kmers in a graph file\r\n                subgraph     filter a subgraph using seed kmers\r\n                thread       thread reads through cleaned graph to make links\r\n                uniqkmers    generate random unique kmers\r\n                unitigs      pull out unitigs in FASTA, DOT or GFA format\r\n                vcfcov       coverage of a VCF against cortex graphs\r\n                vcfgeno      genotype a VCF after running vcfcov\r\n                view         text view of a cortex graph file (.ctx)\r\n    \r\n      Type a command with no arguments to see help.\r\n    \r\n    Common Options:\r\n      -h, --help            Help message\r\n      -q, --quiet           Silence status output normally printed to STDERR\r\n      -f, --force           Overwrite output files if they already exist\r\n      -m, --memory <M>      Memory e.g. 1GB [default: 1GB]\r\n      -n, --nkmers <H>      Hash entries [default: 4M, ~4 million]\r\n      -t, --threads <T>     Limit on proccessing threads [default: 2]\r\n      -o, --out <file>      Output file\r\n      -p, --paths <in.ctp>  Assembly file to load (can specify multiple times)\r\n\r\nGetting Helps\r\n-------------\r\n\r\nType a command with no arguments to see usage. The following may also be useful:\r\n* [wiki](https://github.com/mcveanlab/mccortex/wiki)\r\n* [website](http://mcveanlab.github.io/mccortex)\r\n* [mailing list](https://groups.google.com/forum/#!forum/cortex_var)\r\n* Report a [bug / feature request](https://github.com/mcveanlab/mccortex/issues) on GitHub\r\n* Email me: Isaac Turner <turner.isaac@gmail.com>\r\n\r\nLive chat (email me to fix a time):\r\n* [HipChat](http://www.hipchat.com/gbF6Zf4k3) to instant message -- please email me first to arrange a time\r\n* [![Gitter https://gitter.im/mcveanlab/mccortex](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/mcveanlab/mccortex?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\nCode And Contributing\r\n---------------------\r\n\r\nIssues can be submitted on github. Pull requests welcome. Please add your name\r\nto the AUTHORS file. Code should compile on mac/linux with clang/gcc without errors or warnings.\r\n\r\nMore on the [wiki](https://github.com/mcveanlab/mccortex/wiki/Contributing)\r\n\r\nUnit tests are run with `make test` and integration tests with `cd tests; ./run`. Both of these test suites are run automatically with Travis CI when commits are pushed to GitHub. \r\n\r\nStatic analysis can be run with [cppcheck](http://cppcheck.sourceforge.net):\r\n\r\n    cppcheck src\r\n\r\nor with [clang](http://clang-analyzer.llvm.org):\r\n\r\n    rm -rf bin/mccortex31\r\n    scan-build make RECOMPILE=1\r\n\r\nOccasionally we also run Coverity Scan. This is done by pushing to the `coverity_scan` branch on github, which triggers Travis CI to upload the latest code to Coverity.\r\n\r\n[![Coverity Scan Build Status](https://scan.coverity.com/projects/2329/badge.svg)](https://scan.coverity.com/projects/2329)\r\n\r\n    git checkout coverity_scan\r\n    git merge develop\r\n    git checkout --ours .travis.yml\r\n    git checkout --ours configure\r\n\r\nLicense: MIT\r\n------------\r\n\r\nBundled libraries may have different licenses:\r\n* [BitArray](https://github.com/noporpoise/BitArray) (Public Domain)\r\n* [cJSON](http://http://sourceforge.net/projects/cjson/) (MIT)\r\n* [CityHash](https://code.google.com/p/cityhash/) (MIT)\r\n* [htslib](https://github.com/samtools/htslib) (MIT)\r\n* [lookup3](http://burtleburtle.net/bob/c/lookup3.c) (Public Domain)\r\n* [madcrowlib](https://github.com/noporpoise/madcrowlib) (MIT)\r\n* [msg-pool](https://github.com/noporpoise/msg-pool) (Public Domain)\r\n* [seq-align](https://github.com/noporpoise/seq-align) (Public Domain)\r\n* [seq_file](https://github.com/noporpoise/seq_file) (Public Domain)\r\n* [sort_r](https://github.com/noporpoise/sort_r) (Public Domain)\r\n* [carrays](https://github.com/noporpoise/carrays) (Public Domain)\r\n* [string_buffer](https://github.com/noporpoise/string_buffer) (Public Domain)\r\n* [xxHash](https://github.com/Cyan4973/xxHash.git) (BSD)\r\n\r\nUsed in testing:\r\n* [bcftools](https://github.com/samtools/bcftools) (MIT)\r\n* [bioinf-perl](https://github.com/noporpoise/bioinf-perl) (Public Domain)\r\n* [bwa](https://github.com/lh3/bwa) (MIT)\r\n* [readsim](https://github.com/noporpoise/readsim) (Public Domain)\r\n* [samtools](https://github.com/samtools/samtools) (MIT)\r\n\r\nCiting\r\n------\r\n\r\n'Cortex with low memory and read threading' is currently unpublished.  Please\r\ncite previous cortex_var papers:\r\n\r\n* De novo assembly and genotyping of variants using colored de Bruijn graphs,\r\nIqbal(*), Caccamo(*), Turner, Flicek, McVean (Nature Genetics) (2012)\r\n(doi:10.1038/ng.1028) http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3272472\r\n* High-throughput microbial population genomics using the Cortex variation assembler,\r\nIqbal, Turner, McVean (Bioinformatics) (Nov 2012)\r\n(doi:10.1093/bioinformatics/bts673) http://www.ncbi.nlm.nih.gov/pubmed/23172865\r\n",
  "google": "UA-51392358-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}